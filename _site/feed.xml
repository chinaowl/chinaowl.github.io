<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>China Wang</title>
    <description>China&#39;s website!</description>
    <link>http://chinaowl.co/</link>
    <atom:link href="http://chinaowl.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Jul 2016 06:10:15 -0700</pubDate>
    <lastBuildDate>Mon, 04 Jul 2016 06:10:15 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Project Euler: 2013 and now</title>
        <description>&lt;p&gt;In college, I did a bunch of &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; problems (in Java) to practice for tests and interviews. A few weeks ago, I thought it would be fun to attempt some of them in JavaScript.&lt;/p&gt;

&lt;p&gt;Past me had saved my solutions to GitHub, and I just now looked at them for the first time in years. And wow. Talk about embarrassing.&lt;/p&gt;

&lt;p&gt;Or, to frame it more positively, I’ve actually gotten better at coding after graduating!&lt;/p&gt;

&lt;p&gt;For example, here’s the first problem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pretty simple, right?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function sumOfAllMultiples() {
  var sum = 0;
  
  for (var i = 0; i &amp;lt; 1000; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      sum += i;
    }
  }
  
  return sum;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I checked out my old solution, expecting more or less the same thing but in Java. Cue facepalm.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Problem1 {
  public static void main(String [] args) {
    int sum3 = 0;
    int sum5 = 0;
    int sum15 = 0;
    
    for (int i = 3; i &amp;lt; 1000; i += 3) {
      sum3 += i;
    }
    
    for (int i = 5; i &amp;lt; 1000; i += 5) {
      sum5 += i;
    }
    
    for (int i = 15; i &amp;lt; 1000; i += 15) {
      sum15 += i;
    }
    
    System.out.print(sum3 + sum5 - sum15);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yeah, I don’t know.&lt;/p&gt;

&lt;p&gt;It gets better (or worse) when I look at my old solution to the second problem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Problem2 {
  public static void main(String[] args) {
    int sum = 0;
    
    for (int index = 1; fibonacci(index) &amp;lt; 4000000; index++) {
      if (fibonacci(index) % 2 == 0) {
        sum += fibonacci(index);
      }
    }
    
    System.out.print(sum);
  }
     
  // Find the nth Fibonacci term.
  public static int fibonacci(int n) {
    if (n == 1) return 1;
    if (n == 2) return 2;
    
    return (fibonacci(n - 1) + (fibonacci(n - 2)));
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I used a recursive solution to find the nth Fibonacci number, which isn’t too surprising since I’m pretty sure I had just learned about recursion at that time. But then I called that recursive method three times in that &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop?&lt;/p&gt;

&lt;p&gt;Here’s my iterative JavaScript solution:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function evenFib() {
  var MAX = 4000000,
      first = 1,
      second = 2,
      sum = 2,
      temp;
   
  while (first + second &amp;lt; MAX) {
    temp = first;
    first = second;
    second += temp;
     
    if (second % 2 === 0) {
      sum += second;
    }
  }
   
  return sum;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://chinaowl.co/javascript/java/2016/06/30/project-euler-2013-and-now.html</link>
        <guid isPermaLink="true">http://chinaowl.co/javascript/java/2016/06/30/project-euler-2013-and-now.html</guid>
        
        
        <category>javascript</category>
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>#clarity2016</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://clarityconf.com&quot;&gt;Clarity&lt;/a&gt;, a conference about style guides and design systems, was held in San Francisco on March 31 and April 1. I decided to go as soon as I saw the impressive speaker list, and now I can say I’m really glad I went.&lt;/p&gt;

&lt;p&gt;Videos of the talks will be available in six months, but that’s kind of a long time so I’m posting all my notes here.&lt;/p&gt;

&lt;p&gt;The conference was held at the &lt;a href=&quot;https://drafthouse.com&quot;&gt;Alamo Drafthouse&lt;/a&gt; in the Mission. The chairs were super comfortable and the food was excellent.&lt;/p&gt;

&lt;p&gt;Swag overview: postcards, pins, stickers, notebooks, a pencil, and a bag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/clarity-swag.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The entire conference was put together by &lt;a href=&quot;https://twitter.com/jina&quot;&gt;Jina&lt;/a&gt;. (Thank you, Jina!) The emcee was &lt;a href=&quot;https://twitter.com/chriscoyier&quot;&gt;Chris Coyier&lt;/a&gt; of CSS-Tricks and CodePen. &lt;a href=&quot;https://twitter.com/bysusanlin&quot;&gt;Susan&lt;/a&gt; was the official sketchnote artist and you can &lt;a href=&quot;http://sketch.bysusanlin.com/tagged/sketchnotes&quot;&gt;see her work here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now onto the fun stuff! Here’s a list of links to each talk, because otherwise this post would be massive.&lt;/p&gt;

&lt;h2 id=&quot;day-one&quot;&gt;Day One&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142145213289/the-thing-is-design-systems-the-time-is-now-by&quot;&gt;The Thing Is Design Systems. The Time Is Now. (Brad Frost)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142145218784/building-empowering-style-guides-with&quot;&gt;Building empowering style guides with practical research (Isaak Hayes &amp;amp; Donna Chan)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142146770059/beyond-the-toolkit-spreading-a-system-across&quot;&gt;Beyond the Toolkit: Spreading a System Across People &amp;amp; Products (Nathan Curtis)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142147748274/code-patterns-for-pattern-making-by&quot;&gt;Code Patterns for Pattern-Making (Miriam Suzanne)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142148416899/crawl-walk-run-the-evolution-of-a&quot;&gt;Crawl, Walk, Run – the Evolution of a Design System (Stephanie Rewis &amp;amp; Brandon Ferrua)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142148906564/being-human-being-slack-by-anna-pickard&quot;&gt;Being Human, Being Slack (Anna Pickard)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;day-two&quot;&gt;Day Two&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142206435674/communicating-animation-by-rachel-nabors&quot;&gt;Communicating Animation (Rachel Nabors)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142206973019/baking-accessibility-in-by-cordelia-mcgee-tubb&quot;&gt;Baking Accessibility In (Cordelia McGee-Tubb)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142207218554/living-systems-brand-in-the-context-of&quot;&gt;Living Systems: Brand in the context of peoples lives. (Jeremy Perez-Cruz)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142207951964/deconstructing-web-systems-or-a-pattern&quot;&gt;Deconstructing Web Systems; or, A Pattern Language for Web Development (Claudina Sarahe)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142208593289/turning-the-ship-living-design-systems-in&quot;&gt;Turning the ship: Living design systems in the federal government (Maya Benari)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chinaowl.xyz/post/142209024194/keynote-designing-for-earthlings-and-astronauts&quot;&gt;Keynote: Designing for Earthlings and Astronauts (Richard Danne)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Apr 2016 00:00:00 -0700</pubDate>
        <link>http://chinaowl.co/clarity2016/clarity/conference/2016/04/03/clarity-2016.html</link>
        <guid isPermaLink="true">http://chinaowl.co/clarity2016/clarity/conference/2016/04/03/clarity-2016.html</guid>
        
        
        <category>clarity2016</category>
        
        <category>clarity</category>
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>`this` in JavaScript</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; has always been a confusing JavaScript keyword to me. Thanks to the &lt;em&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot;&gt;You Don’t Know JavaScript&lt;/a&gt;&lt;/em&gt; series by Kyle Simpson, it’s become slightly less confusing.&lt;/p&gt;

&lt;p&gt;This post will mostly be notes I took from the second chapter of the third book in the series, &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; &amp;amp; Object Prototypes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(My only major gripe was that all the code examples used &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;baz&lt;/code&gt;. I feel that meaningless functions make it hard to understand how you would use &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; in real life code. Hence, I tried to come up with my own examples using more meaningful functions, but unsurprisingly, it was rather difficult.)&lt;/p&gt;

&lt;p&gt;First, the author makes the point that &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; has nothing to do with scope:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To be clear, &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; does not, in any way, refer to a function’s lexical scope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what &lt;em&gt;does&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; have to do with?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is not an author-time binding but a runtime binding. It is contextual based on the conditions of the function’s invocation. &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; binding has nothing to do with where a function is declared, but has instead everything to do with the manner in which the function is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You have to examine the call-site and the call-stack and consult the following four rules to figure out what &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; refers to.&lt;/p&gt;

&lt;h2 id=&quot;rule-one-default-binding&quot;&gt;Rule One: Default Binding&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;most common case&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;standalone function invocation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;default catch-all rule&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;applies when a function is called with a plain, undecorated function reference&lt;/p&gt;

    &lt;p&gt;var counter = 0;&lt;/p&gt;

    &lt;p&gt;function incrementCounter() {
    this.counter++;
}&lt;/p&gt;

    &lt;p&gt;incrementCounter();
console.log(counter); // 1 - got incremented`&amp;lt;/pre&amp;gt;&lt;/p&gt;

    &lt;p&gt;Note: if the function is in &lt;code class=&quot;highlighter-rouge&quot;&gt;strict mode&lt;/code&gt;, the global object is not eligible for the default binding, so &lt;code class=&quot;highlighter-rouge&quot;&gt;this.counter&lt;/code&gt; in the above code would throw an error.&lt;/p&gt;

    &lt;h2 id=&quot;rule-two-implicit-binding&quot;&gt;Rule Two: Implicit Binding&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;consider whether the call-site has a context object (i.e., owning/containing object)&amp;lt;pre&amp;gt;`var counter = 0;&lt;/p&gt;

    &lt;p&gt;function incrementCounter() {
    this.counter++;
}&lt;/p&gt;

    &lt;p&gt;var object = {
    counter: 10,
    incrementCounter: incrementCounter,
};&lt;/p&gt;

    &lt;p&gt;object.incrementCounter();
console.log(counter); // 0 - did not get incremented
console.log(object.counter); // 11 - got incremented`&amp;lt;/pre&amp;gt;&lt;/p&gt;

    &lt;p&gt;But wait! There’s more. In some situations, the implicit binding can be lost.&lt;/p&gt;

    &lt;pre&gt;`var counter = 0;

function incrementCounter() {
    this.counter++;
}

var object = {
    counter: 10,
    incrementCounter: incrementCounter,
};

var copyOfIncrementCounter = object.incrementCounter;

copyOfIncrementCounter();
console.log(counter); // 1 - got incremented
console.log(object.counter); // 10 - did not get incremented
`&lt;/pre&gt;

    &lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;copyOfIncrementCounter&lt;/code&gt; looks like it’s a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;object.incrementCounter&lt;/code&gt;, but it’s actually a reference to the global &lt;code class=&quot;highlighter-rouge&quot;&gt;incrementCounter&lt;/code&gt;. So we fall back to the default binding rule and the global &lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; variable gets incremented.&lt;/p&gt;

    &lt;p&gt;Another example of this situation:&lt;/p&gt;

    &lt;pre&gt;`var counter = 0;

function incrementCounter() {
    this.counter++;
}

var object = {
    counter: 10,
    incrementCounter: incrementCounter
};

function doSomething(callback) {
    callback();
}

doSomething(object.incrementCounter);
console.log(counter); // 1 - got incremented
console.log(object.counter); // 10 - did not get incremented
`&lt;/pre&gt;

    &lt;p&gt;Why?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Parameter passing is just an implicit assignment, and since we’re passing a function, it’s an implicit reference assignment, so the end result is the same as the previous snippet.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;h2 id=&quot;rule-three-explicit-binding&quot;&gt;Rule Three: Explicit Binding&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;force a function call to use a particular object as &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;, which are available to all functions&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; are methods that take an object to use for &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; as their first argument&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; are identical with respect to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;; we won’t worry about their differences for now&amp;lt;pre&amp;gt;`var counter = 0;&lt;/p&gt;

    &lt;p&gt;function incrementCounter() {
    this.counter++;
}&lt;/p&gt;

    &lt;p&gt;var object = {
    counter: 10
};&lt;/p&gt;

    &lt;p&gt;incrementCounter.call(object);
console.log(counter); // 0 - did not get incremented
console.log(object.counter); // 11 - got incremented`&amp;lt;/pre&amp;gt;&lt;/p&gt;

    &lt;p&gt;Note that if a primitive is passed instead of an object, it gets wrapped in its object-form (&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;). This is called &lt;em&gt;boxing&lt;/em&gt;.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Unfortunately, explicit binding alone still doesn’t offer any solution to the issue mentioned previously, of a function “losing” its intended &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; binding…&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;…but &lt;em&gt;hard binding&lt;/em&gt;, a variation pattern around explicit binding, will work.&lt;/p&gt;

    &lt;pre&gt;`var counter = 0;

function incrementCounter() {
    this.counter++;
}

var object = {
    counter: 10
};

var incrementCounterWrapper = function() {
    incrementCounter.call(object);
}

incrementCounterWrapper();
console.log(counter); // 0 - did not get incremented
console.log(object.counter); // 11 - got incremented

incrementCounterWrapper.call(window); // will it use the global counter? nope!
console.log(counter); // 0 - did not get incremented
console.log(object.counter); // 12 - got incremented
`&lt;/pre&gt;

    &lt;p&gt;What’s happening here is &lt;code class=&quot;highlighter-rouge&quot;&gt;incrementCounterWrapper&lt;/code&gt; internally calls &lt;code class=&quot;highlighter-rouge&quot;&gt;incrementCounter&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;. No matter how &lt;code class=&quot;highlighter-rouge&quot;&gt;incrementCounterWrapper&lt;/code&gt; is called, it will always manually invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;incrementCounter&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Since hard binding is such a common pattern, it’s provided with a built-in utility as of ES5, &lt;code class=&quot;highlighter-rouge&quot;&gt;Function.prototype.bind&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bind(..)&lt;/code&gt; returns a new function that is hardcoded to call the original function with the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; context set as you specified.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;pre&gt;`var counter = 0;

function incrementCounter() {
    this.counter++;
}

var object = {
    counter: 10
};

var incrementCounterWrapper = incrementCounter.bind(object);

incrementCounterWrapper();
console.log(counter); // 0 - did not get incremented
console.log(object.counter); // 11 - got incremented
`&lt;/pre&gt;

    &lt;h2 id=&quot;rule-four-new-binding&quot;&gt;Rule Four: &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; Binding&lt;/h2&gt;

    &lt;p&gt;Ah, the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword. Another confusing one that I often see but am never sure when to use myself.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;JavaScript has a &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator, and the code pattern to use it looks basically identical to what we see in those class-oriented languages; most developers assume that JavaScript’s mechanism is doing something similar. However, there really is no connection to class-oriented functionality implied by &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; usage in JS.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Okay, what else?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;First, let’s re-define what a “constructor” in JavaScript is. In JS, constructors are just functions that happen to be called with the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator in front of them. They are not attached to classes, nor are they instantiating a class. They are not even special types of functions. They’re just regular functions that are, in essence, hijacked by the use of new in their invocation.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;How is &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; relevant to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, then?&lt;/p&gt;

    &lt;p&gt;Well, when a function is invoked with &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, a brand new object is created. That object is set as the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; binding for that function call. And that function call will return the new object (unless the function returns its own alternate object).&lt;/p&gt;

    &lt;pre&gt;`var counter = 0;

function incrementCounter(counter) {
    this.counter = counter;
    this.counter++;
}

var newIncrementCounter = new incrementCounter(10);

console.log(counter); // 0 - did not get incremented
console.log(newIncrementCounter.counter); // 11 - got incremented

&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## Rule Precedence&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; binding&lt;/li&gt;
  &lt;li&gt;explicit binding&lt;/li&gt;
  &lt;li&gt;implicit binding&lt;/li&gt;
  &lt;li&gt;default binding&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More detailed:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Is the function called with &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; (new binding)? If so, &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is the newly constructed object.
&lt;code class=&quot;highlighter-rouge&quot;&gt;var bar = new foo()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Is the function called with &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; (explicit binding), even hidden inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; hard binding? If so, &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is the explicitly specified object.
&lt;code class=&quot;highlighter-rouge&quot;&gt;var bar = foo.call( obj2 )&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Is the function called with a context (implicit binding), otherwise known as an owning or containing object? If so, &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is that context object.
&lt;code class=&quot;highlighter-rouge&quot;&gt;var bar = obj1.foo()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Otherwise, default the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; (default binding). If in &lt;code class=&quot;highlighter-rouge&quot;&gt;strict mode&lt;/code&gt;, pick &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, otherwise pick the global object.
&lt;code class=&quot;highlighter-rouge&quot;&gt;var bar = foo()&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a discussion on why this is the case, read the original material &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%2526%20object%20prototypes/ch2.md#everything-in-order&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(And just read the whole thing while you’re at it.)&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://chinaowl.co/javascript/2015/11/08/this-in-javascript.html</link>
        <guid isPermaLink="true">http://chinaowl.co/javascript/2015/11/08/this-in-javascript.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Investigating JavaScript closures</title>
        <description>&lt;p&gt;I was looking up JavaScript closures this morning and came across this &lt;a href=&quot;http://stackoverflow.com/questions/111102/how-do-javascript-closures-work&quot;&gt;terrific Stack Overflow answer&lt;/a&gt; (the first one with all the examples).&lt;/p&gt;

&lt;p&gt;But, one of the examples (#5) confused me so I decided to take a closer look at it. Here’s the code, taken directly from SO with a little bit of formatting:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function buildList(list) {
    var result = [];
    for (var i = 0; i &amp;lt; list.length; i++) {
        var item = &#39;item&#39; + i;
        result.push(function() {
            alert(item + &#39; &#39; + list[i])
        });
    }
    return result;
}

function testList() {
    var fnlist = buildList([1,2,3]);
    // Using j only to help prevent confusion -- could use i.
    for (var j = 0; j &amp;lt; fnlist.length; j++) {
        fnlist[j]();
    }
}
`&amp;lt;/pre&amp;gt;

When I ran the code in the console, calling `testList()`, I got `&#39;item2 undefined&#39;` in an alert three times. But according to the explanation, I should have seen `&#39;item3 undefined&#39;`.

&amp;gt; Note that when you run the example, `&#39;item3 undefined&#39;` is alerted three times! This is because just like previous examples, there is only one closure for the local variables for `buildList`. When the anonymous functions are called on the line `fnlist[j]();` they all use the same single closure, and they use the current value for `i` and `item` within that one closure (where `i` has a value of 3 because the loop had completed, and `item` has a value of `&#39;item3&#39;`).

Unless there’s something wrong with my browser, I don’t think that’s completely correct. Let’s look at the `buildList` function in depth.

`function buildList(list) {
`

Passing in a variable called `list` to the function.

&amp;lt;pre&amp;gt;`    var result = [];
`&amp;lt;/pre&amp;gt;

Just initiating an empty array.

&amp;lt;pre&amp;gt;`    for (var i = 0; i &amp;lt; list.length; i++) {
`&amp;lt;/pre&amp;gt;

Here we have a standard `for` loop. But in JavaScript, you have to remember that the variable `i` gets hoisted to the top of the current scope (which in this case is the scope of the `buildList` function). So once this loop is done, we’ll still have access to `i`.

&amp;lt;pre&amp;gt;`        var item = &#39;item&#39; + i;
`&amp;lt;/pre&amp;gt;

Creating a string using the word ‘item’ and the current value of `i`. I think this is where my confusion is coming from. More on that later.

&amp;lt;pre&amp;gt;`        result.push(function() {
            alert(item + &#39; &#39; + list[i])
        });
`&amp;lt;/pre&amp;gt;

Here’s where the fun closure stuff happens. We’re creating new functions and pushing them onto the `result` array. These functions are special because they have access to the enclosing function’s variables, like `list` and `i`. And they will still have access after `buildList` is done running—the variables are saved in a closure.

&amp;lt;pre&amp;gt;`    }
    return result;
}
`&amp;lt;/pre&amp;gt;

The array of functions is returned.

Calling `buildList([1, 2, 3])` and then each of the functions in `result` always yields `&#39;item2 undefined&#39;`. The `undefined` part makes sense, because at the end of the `for` loop, `i` increments one last time to `3`. So `i = 3` at the point in time when we call the functions in `result`. Since the input array `[1, 2, 3]` only has three elements, trying to access the fourth element at index `3` results in `undefined`.

As for why I’m seeing `&#39;item2&#39;` and not `&#39;item3&#39;`, I think that’s because the `item` string is set in this line:

&amp;lt;pre&amp;gt;`var item = &#39;item&#39; + i;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since the last time the code inside the loop is run is when &lt;code class=&quot;highlighter-rouge&quot;&gt;i = 2&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; string is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;item2&#39;&lt;/code&gt;, not &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;item&#39; + i&lt;/code&gt;. In other words, the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is evaluated at that point in time, and not later, when &lt;code class=&quot;highlighter-rouge&quot;&gt;i = 3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope this is correct! I would comment on the SO answer, but I don’t have that privilege yet.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://chinaowl.co/javascript/2015/11/06/investigating-javascript-closures.html</link>
        <guid isPermaLink="true">http://chinaowl.co/javascript/2015/11/06/investigating-javascript-closures.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Gulp for beginners</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://gulpjs.com&quot;&gt;Gulp&lt;/a&gt; is a JavaScript-based build tool/task runner. What does that mean?&lt;/p&gt;

&lt;p&gt;Say you’re working on a website and you’re writing CSS using &lt;a href=&quot;http://sass-lang.com&quot;&gt;Sass&lt;/a&gt; and JavaScript using &lt;a href=&quot;http://coffeescript.org&quot;&gt;CoffeeScript&lt;/a&gt;. You’ll need to convert it to plain CSS and JavaScript so that browsers can understand it. And perhaps for performance reasons, you want to &lt;a href=&quot;https://developers.google.com/speed/docs/insights/MinifyResources?hl=en&quot;&gt;minify&lt;/a&gt; your code before sending it off. You’ll also need to set up a local server so you can see what your website looks like as you build it.&lt;/p&gt;

&lt;p&gt;Build tools and task runners like Gulp automate these processes so that all you have to do is enter a command in your terminal.&lt;/p&gt;

&lt;p&gt;Side note: I started my front-end web development career by using &lt;a href=&quot;https://incident57.com/codekit/&quot;&gt;CodeKit&lt;/a&gt;, a Mac app that compiles and minifies your code, sets up a server, watches for changes, and auto-refreshes the browser (among other useful things). All you have to do is change a few settings and press a button. It’s a really great app (particularly for designers who prototype with code, in my opinion), but after using it for a month or so, I realized that it’s important to know how to do what CodeKit is doing under the surface. (The aha moment came when I cloned one of my own GitHub projects onto a new computer and realized I couldn’t do anything without CodeKit installed.)&lt;/p&gt;

&lt;p&gt;Another side note: &lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt&lt;/a&gt; is frequently mentioned as an alternative to Gulp. I have used both in the past year and I don’t have a super strong preference for one or the other (but I am leaning towards Gulp). &lt;a href=&quot;https://medium.com/@preslavrachev/gulp-vs-grunt-why-one-why-the-other-f5d3b398edc4#.4haswc244&quot;&gt;Here&lt;/a&gt; is a good article on the differences between the two.&lt;/p&gt;

&lt;p&gt;I learned Grunt first and then switched to Gulp because my latest project at work uses it, and I wanted to understand it better. I started using a small, simple &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; in my side projects that I will break down in detail here.&lt;/p&gt;

&lt;p&gt;What’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;? That’s the file all your tasks go in. It should be at the root of your project.&lt;/p&gt;

&lt;p&gt;First, some more background and setup. My project structure looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/
    js/
        app.js
        [other *.js files]
    scss/
        style.scss
        [other *.scss files]
public/
    index.html
    bundle.js
    style.css
node_modules/
    [all dependencies]
server.js
gulpfile.js
package.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I use &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm&lt;/a&gt; as my package manager. Check out this incomplete project of mine &lt;a href=&quot;https://github.com/chinaowl/next-caltrain&quot;&gt;here&lt;/a&gt; for a live example. Now let’s look at &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; in detail.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var gulp = require(&#39;gulp&#39;);
var del = require(&#39;del&#39;);
var browserify = require(&#39;browserify&#39;);
var source = require(&#39;vinyl-source-stream&#39;);
var sass = require(&#39;gulp-sass&#39;);
var shell = require(&#39;gulp-shell&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the top of my file, I put all my dependencies. (I include all of these things in the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file.) I found these through Google, mostly. A good rule of thumb when choosing a dependency is to see how recently it was updated, how many open issues there are, and how many people have downloaded it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;clean&#39;, function () {
    del([&#39;./public/*&#39;, &#39;!./public/index.html&#39;]);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A simple, standard task that deletes all generated files using &lt;a href=&quot;https://www.npmjs.com/package/del&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;del&lt;/code&gt;&lt;/a&gt;.  This is so that you start with a clean workspace each time. To run this task on its own, you would type &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp clean&lt;/code&gt; into the terminal.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;js&#39;, function () {
    browserify(&#39;./src/js/app.js&#39;)
        .bundle()
        .pipe(source(&#39;bundle.js&#39;))
        .pipe(gulp.dest(&#39;./public&#39;));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A JavaScript task that takes everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;, including its dependencies, and puts it all into one file using &lt;a href=&quot;http://browserify.org&quot;&gt;Browserify&lt;/a&gt;. Browserify is something that requires its own lengthy post, but to really gloss over things for now, I’ll say that it’s a tool that lets you &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; modules (something that comes with &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; but not plain JavaScript) and bundle them up into one JavaScript file.&lt;/p&gt;

&lt;p&gt;Along with Browserify, this task uses &lt;a href=&quot;https://www.npmjs.com/package/vinyl-source-stream&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vinyl-source-stream&lt;/code&gt;&lt;/a&gt; and Gulp’s built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;pipe&lt;/code&gt; functionality. You can think of &lt;code class=&quot;highlighter-rouge&quot;&gt;pipe&lt;/code&gt; as…pipes! You take the results of one thing and pipe it into the next thing. Output becomes input repeatedly until you get what you want.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.dest()&lt;/code&gt; tells the task what directory to place the final result.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;css&#39;, function () {
    gulp.src(&#39;./src/scss/*.scss&#39;)
        .pipe(sass().on(&#39;error&#39;, sass.logError))
        .pipe(gulp.dest(&#39;./public&#39;));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Takes Sass and converts it to CSS using &lt;a href=&quot;https://www.npmjs.com/package/gulp-sass&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-sass&lt;/code&gt;&lt;/a&gt;. Uses pipes, similar to the JavaScript task above.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;build&#39;, [&#39;clean&#39;, &#39;js&#39;, &#39;css&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This task combines the three tasks I’ve already written into one that can be called with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp build&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;server&#39;, shell.task(&#39;node server.js&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This task is possible thanks to &lt;a href=&quot;https://www.npmjs.com/package/gulp-shell&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-shell&lt;/code&gt;&lt;/a&gt;. It lets Gulp run any command you would normally enter in your terminal. In this case, I use it to start my Express server.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;watch&#39;, function () {
    gulp.watch(&#39;./src/scss/*.scss&#39;, [&#39;css&#39;]);
    gulp.watch(&#39;./src/js/*.js&#39;, [&#39;js&#39;]);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A task that watches for changes to certain files and then performs the task specified in the brackets when something changes. &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; comes with Gulp.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task(&#39;default&#39;, [&#39;build&#39;, &#39;server&#39;, &#39;watch&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you simply type &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the terminal without specifying a task, it will run the default task. In this case, it will build the project, start the server, and watch for changes.&lt;/p&gt;

&lt;p&gt;And that’s all! There’s a lot more you can do with Gulp. Checking out the recipes &lt;a href=&quot;https://github.com/gulpjs/gulp/tree/master/docs/recipes&quot;&gt;here&lt;/a&gt; is a good place to start.&lt;/p&gt;

&lt;p&gt;P.S. I’m looking for feedback on this post! If you’ve never heard of Gulp before, was it understandable? Please feel free to leave a comment.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 00:00:00 -0700</pubDate>
        <link>http://chinaowl.co/javascript/2015/10/26/gulp-for-beginners.html</link>
        <guid isPermaLink="true">http://chinaowl.co/javascript/2015/10/26/gulp-for-beginners.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
